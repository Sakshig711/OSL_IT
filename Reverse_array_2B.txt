//main

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/types.h>

int partition(int arr[], int low, int high)
{
	int pivot = arr[low];
	int i=low+1;
	int j = high;
	int temp;
	while(i<=j)
	{
		while(arr[i] < pivot)
		{
			i++;
		}
		while(arr[j] > pivot)
		{
			j--;
		}
		
		if(i<j)
		{
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;		
		}
		else
		{
			break;
		}
	}
	temp = arr[low];
	arr[low] = arr[j];
	arr[j] = temp;
	
	return j;
}
void quick_sort(int arr[], int low, int high)
{
	if(low < high)
	{
		int k = partition(arr,low,high);
		quick_sort(arr, low, k-1);
		quick_sort(arr, k+1,high);
	}
}

int main()
{
	int n;
	printf("Enter the number of elements to be sorted : ");
	scanf("%d", &n);
	int arr[n];
	
	for(int i = 0; i < n; i++)
	{
		scanf("%d", &arr[i]);
	}
	pid_t pid;
	printf("Fork process starting.... \n");
	quick_sort(arr,0, n - 1);
	pid = fork();
	if( pid < 0)
	{
		perror("Fork failed");
		exit(1);
	}
	else if( pid == 0)
	{
		char arr_str[n][10]; 
		char* args[n + 2]; 
		args[0] = "./execve";
		for(int i = 0; i < n; i++)
		{
			sprintf(arr_str[i], "%d", arr[i]);
			args[i + 1] = arr_str[i];
		}
		args[n + 1] = NULL;
		execve(args[0], args, NULL);
		perror("execve");
		exit(1);
	}
	else
	{
		wait(NULL);
		printf("Parent process id : %d", getpid());
	}
	return 0;
}

//execve.c
#include<stdio.h>
#include<stdlib.h>

int main( int argc, char *argv[])
{
	if(argc < 2)
	{
		printf("No elements in an array passed");
		return 1;
	}
	printf("Array in reverse order : ");
	for(int i = argc - 1; i > 0; i--)
	{
		printf("%s",argv[i]);
		printf("\t");
	}
	printf("\n");
	return 0;
}
