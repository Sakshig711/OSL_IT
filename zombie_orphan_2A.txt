#include<stdio.h>
#include<stdlib.h>
#include<sys/wait.h>
#include<sys/types.h>
#include<unistd.h>


int partition(int arr[], int low, int high)
{
	int pivot = arr[low];
	int i=low+1;
	int j = high;
	int temp;
	while(i<=j)
	{
		while(arr[i] < pivot)
		{
			i++;
		}
		while(arr[j] > pivot)
		{
			j--;
		}
		
		if(i<j)
		{
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;		
		}
		else
		{
			break;
		}
	}
	temp = arr[low];
	arr[low] = arr[j];
	arr[j] = temp;
	
	return j;
	
}
void quick_sort(int arr[], int low, int high)
{
	if(low <= high)
	{
		int k = partition(arr,low,high);
		quick_sort(arr, low, k-1);
		quick_sort(arr, k+1,high);
	}
}
void orphan()
{
	pid_t pid = fork();
	
	if(pid < 0)
	{
		perror("Fork");
		exit(1);
	}
	else if(pid == 0)
	{
		printf("child process is created (%d). Parent process = (%d)", getpid(), getppid());
		sleep(3);
		system("ps -eo pid,ppid,state,cmd | grep a.out");
		printf("childprocess %d is terminating.\n", getpid());
		
	}
	else
	{
		printf("Parent process is created %d . child process %d", getpid(), pid);
		 system("ps -eo pid,ppid,state,cmd | grep a.out");
		 exit(0);
		 printf("parent process %d is terminating.\n", getpid());
	}
}
void zombie()
{
	pid_t pid = fork();
	
	if(pid < 0)
	{
		perror("Fork");
		exit(1);
	}
	else if(pid == 0)
	{
		printf("child process is created (%d). Parent process = (%d)", getpid(), getppid());
		exit(0);
	}
	else
	{
		printf("Parent process is created %d . child process %d", getpid(), pid);
		sleep(3);
		system("ps -eo pid,ppid,state,cmd | grep defunct");
		printf("Parent process %d is terminating.\n", getpid());
		
	}
}
void print_array(int arr[], int size)
{
      for (int i = 0; i < size; i++)
      {
            printf("%d ", arr[i]);
      }
      printf("\n");
}
void SortByWaitCall(int arr[], int n)
{
	pid_t pid = fork();
	
	if(pid < 0)
	{
		perror("Fork");
		exit(1);
	}
	else if(pid == 0)
	{
		printf("child process is sorting array ...");
		quick_sort(arr,0,n-1);
		printf(" array:");
		print_array(arr,n);
		exit(0);
	}
	else
	{
		printf("Parent process is sorting array");
		quick_sort(arr,0,n-1);
		int status;
		pid_t child_pid = wait(&status);
		if(child_pid < 0)
		{
			perror("wait failed");
			exit(1);
		}
		else 
		{
			printf("parent process %d child process wait %d", getpid(), child_pid);
		}
		
	}
}
int main()
{
	int n,i,c;
	int *arr = NULL;

	printf("1)Zombie\n2)Orphan\n3)SortByWaitCall\nEnter ur choice : ");
	scanf("%d", &c);
	
	switch(c)
	{
		case 1: zombie();
			break;
			
		case 2: orphan(); 
			break;
			
		case 3: 	printf("Enter no of intergers to sort  = ");
	                    scanf("%d",&n);
	                   arr = (int *)malloc(n * sizeof(int));
	                    printf("Enter the intergers: ");
	                    for(i=0; i<n; i++)
	                    {
		                    scanf("%d", &arr[i]);
	                    } 
		             SortByWaitCall(arr, n);
			       break;
			
		default:  printf("Invalid choice\n");
	}
	return 0;
}
